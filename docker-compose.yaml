version: "3.9"

####  INFORMATION
# HOME SERVER, PRIMARY DOCKER-COMPOSE CONFIGURATION FILE
# HOST HARDWARE: DELL OPTIPLEX 9020, i7-4790 3.6 GHZ 4C/8T, 32GB RAM
# HOST OS: UBUNTU 22.04.03 LTS
#
# DOCKER VERSION: 24.0.7
# DOCKER COMPOSE VERSION: v2.21.0
#
####  NETWORK TYPOLOGY
# 192.168.10.0/24 - PRIMARY NETWORK
#   192.168.10.20 - FREENAS HOST IP
#   192.168.10.30 - DOCKER HOST IP
#   192.168.10.50-90 - DHCP RANGE
#
# 192.168.90.0/24 - TRAEFIK PROXY NETWORK
#
# 192.168.91.0/24 - DOCKER SOCKET PROXY NETWORK
#
####

####  DOCKER NETWORKS
# THE FOLLOWING CREATES 3 NETWORKS: DEFAULT DOCKER NETWORK,
# TRAEFIK PROXY NETWORK, AND THE DOCKER SOCKET PROXY NETWORK
networks:
  trfk_proxy:
    name: trfk_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  default:
    driver: bridge
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24

####  SECRETS
secrets:
  authelia_jwt_secret:
    file: $SECRETSDIR/AUTHELIA_JWT_SECRET
  authelia_session_secret:
    file: $SECRETSDIR/AUTHELIA_SESSION_SECRET
  cloudflare_email_secret:
    file: $SECRETSDIR/CLOUDFLARE_EMAIL
  cloudflare_global_api_key_secret:
    file: $SECRETSDIR/CLOUDFLARE_GLOBAL_API_KEY
  cloudflare_traefik_dns_api_token_secret:
    file: $SECRETSDIR/CLOUDFLARE_TRAEFIK_DNS_API_TOKEN
    
####  SERVICES
services:

####  FRONTENDS

#  TRAEFIK 2 - Reverse Proxy
#  ###  touch traefik.log and acme/acme.json
#  ###  chmod 600 acme/acme.json
  traefik:
    container_name: traefik
    image: traefik:2.10
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    networks:
      trfk_proxy:
        ipv4_address: 192.168.90.254 # Specify a static IP
      socket_proxy:
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS, $LOCAL_IPS
      - --entryPoints.traefik.address=:8080
      # - --entryPoints.ping.address=:8081
      - --api=true
      # - --api.insecure=true
      - --api.dashboard=true
      #- --ping=true
      #- --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      # Automatically set Host rule for services
      # - --providers.docker.defaultrule=HostHeader(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      # - --entrypoints.https.http.middlewares=chain-authelia@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
      # - --entrypoints.https.http.tls.domains[1].main=$DOMAIN # Pulls main cert for second domain
      # - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAIN # Pulls wildcard cert for second domain
      - --providers.docker.network=trfk_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate

    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8082
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERCONFDIR/traefik2/rules:/rules # file provider directory
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
      - $DOCKERCONFDIR/traefik2/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $DOCKERSHAREDDIR/logs:/logs # for fail2ban - make sure to touch file before starting container
      - $DOCKERSHAREDDIR:/shared
    secrets:
      - cloudflare_traefik_dns_api_token_secret
      #- cloudflare_email_secret
      #- cloudflare_api_key_secret
    environment:
      - TZ=$TZ
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cloudflare_traefik_dns_api_token_secret
      #- CF_API_EMAIL=/run/secrets/cloudflare_email_secret
      #- CF_API_KEY=/run/secrets/cloudflare_api_key_secret
      - DOMAINNAME
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=HostHeader(`traefik.$DOMAINNAME`)"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      #- "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file"
      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-basic-auth@file"


#  DOCKER SOCKET PROXY - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    networks:
      socket_proxy:
        ipv4_address: 192.168.91.254 #Sets a static IP for this service
    ports:
      - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Access GRANTED by default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Access REVOKED by default
      # Security-critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
        # GET Optons
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer, Watchtower
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer, Watchtower
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portaienr
      - VOLUMES=1 # Portainer


  ###  AUTHELIA (LITE) - SSO & 2FA
  authelia:
    container_name: authelia
    # Check this before upgrading: https://github.com/authelia/authelia/blob/master/BREAKING.md
    image: authelia/authelia:latest
    restart: always
    networks:
      - trfk_proxy
    # ports:
    #   - "9091:9091"
    volumes:
      - $DOCKERCONFDIR/authelia:/config
    environment:
      - TZ=$TZ
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
      # - AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE=/run/secrets/authelia_storage_mysql_password
      # - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/authelia_notifier_smtp_password
      # - AUTHELIA_DUO_API_SECRET_KEY_FILE=/run/secrets/authelia_duo_api_secret_key
    secrets:
      - authelia_jwt_secret
      - authelia_session_secret
      # - authelia_storage_mysql_password
      # - authelia_notifier_smtp_password
      # - authelia_duo_api_secret_key
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.authelia-rtr.entrypoints=https"
      - "traefik.http.routers.authelia-rtr.rule=Host(`authelia.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.authelia-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.authelia-rtr.service=authelia-svc"
      - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"
      
  # ###  ORGANIZR - UNIFIED FRONTEND
  # organizr:
    # container_name: organizr
    # image: organizr/organizr:latest
    # restart: unless-stopped
    # networks:
      # - T2Proxy
    # security_opt:
      # - no-new-privileges:true
    # #ports:
    # #  - "8282:80"
    # volumes:
      # - $DOCKERCONFDIR/organizr:/config
    # environment:
      # - PUID=$PUID
      # - PGID=$PGID
      # - TZ=$TZ
    # labels:
      # - "traefik.enable=true"
      # ## HTTP Routers
      # - "traefik.http.routers.organizr-rtr.entrypoints=https"
      # - "traefik.http.routers.organizr-rtr.rule=Host(`$DOMAINNAME`) || Host(`www.$DOMAINNAME`)"
      # ## Middlewares
      # - "traefik.http.routers.organizr-rtr.middlewares=organizr-redirect@docker,chain-authelia@file"
        # # Redirect non-www to www middleware
      # - "traefik.http.middlewares.organizr-redirect.redirectregex.regex=^https?://$DOMAINNAME/(.*)"
      # - "traefik.http.middlewares.organizr-redirect.redirectregex.replacement=https://www.$DOMAINNAME/$${1}"
      # - "traefik.http.middlewares.organizr-redirect.redirectregex.permanent=true"
      # ## HTTP Services
      # - "traefik.http.routers.organizr-rtr.service=organizr-svc"
      # - "traefik.http.services.organizr-svc.loadbalancer.server.port=80"
 
########### MEDIA MANAGEMENT - PVRS

  ###  RADARR - MOVIE MANAGEMENT
  radarr:
    container_name: radarr
    hostname: radarr
    image: lscr.io/linuxserver/radarr:latest
    restart: unless-stopped
    networks:
      - trfk_proxy
    security_opt:
      - no-new-privileges:true
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    ports:
      - "7878:7878"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - $DOCKERCONFDIR/radarr:/config
      - $DOCKERSHAREDDIR:/shared
      - $MEDIADIR_DOWNLOAD:/downloads
      - $MEDIADIR_MOVIES:/movies
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Host(`radarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))"
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAINNAME`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.radarr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"


  ###  SONARR - TV SHOW MANAGEMENT
  sonarr:
    # image: aront/sonarr  #for mp4_automator support
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    networks:
      - trfk_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - "8989:8989"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - ${DOCKERCONFDIR}/sonarr:/config
      - ${DOCKERSHAREDDIR}:/shared
      - ${MEDIADIR_DOWNLOAD}:/downloads
      - ${MEDIADIR_TV}:/tv
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`sonarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))"
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME`)"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"
 
  # ###  LIDARR - MUSIC MANAGEMENT
  # lidarr:
    # image: linuxserver/lidarr:latest
    # container_name: lidarr
    # restart: unless-stopped
    # networks:
      # - T2Proxy
    # security_opt:
      # - no-new-privileges:true
    # ports:
      # - "8686:8686"
    # volumes:
      # - /etc/localtime:/etc/localtime:ro
      # - ${DOCKERCONFDIR}/lidarr:/config
      # - ${DOCKERSHAREDDIR}:/shared
      # - ${MEDIADIR_DOWNLOAD}:/downloads
      # - ${MEDIADIR_MUSIC}:/music
    # environment:
      # PUID: $PUID
      # PGID: $PGID
      # TZ: $TZ
    # labels:
      # - "traefik.enable=true"
      # ## HTTP Routers Auth Bypass
      # - "traefik.http.routers.lidarr-rtr-bypass.entrypoints=https"
      # - "traefik.http.routers.lidarr-rtr-bypass.rule=Host(`lidarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$LIDARR_API_KEY`) || Query(`apikey`, `$LIDARR_API_KEY`))"
      # - "traefik.http.routers.lidarr-rtr-bypass.priority=100"
      # ## HTTP Routers Auth
      # - "traefik.http.routers.lidarr-rtr.entrypoints=https"
      # - "traefik.http.routers.lidarr-rtr.rule=Host(`lidarr.$DOMAINNAME`)"
      # - "traefik.http.routers.lidarr-rtr.priority=99"
      # ## Middlewares
      # - "traefik.http.routers.lidarr-rtr-bypass.middlewares=chain-no-auth@file"
      # - "traefik.http.routers.lidarr-rtr.middlewares=chain-authelia@file"
      # ## HTTP Services
      # - "traefik.http.routers.lidarr-rtr.service=lidarr-svc"
      # - "traefik.http.routers.lidarr-rtr-bypass.service=lidarr-svc"
      # - "traefik.http.services.lidarr-svc.loadbalancer.server.port=8686"
 
 ########### MEDIA SERVERS
  
  ###  EMBY - MEDIA SERVER
  emby:
    image: linuxserver/emby
    container_name: emby
    hostname: emby
    restart: unless-stopped
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    networks:
      - trfk_proxy
    devices:
      - /dev/dri:/dev/dri
    ports:
      - "8096:8096/tcp"
      - "8920:8920/tcp"
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKERCONFDIR}/emby:/config
      - ${DOCKERSHAREDDIR}:/shared
      - ${MEDIADIR_MOVIES}:/data/movies
      - ${MEDIADIR_TV}:/data/tv
    labels: 
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.emby-rtr.entrypoints=https"
      - "traefik.http.routers.emby-rtr.rule=Host(`emby.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.emby-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.emby-rtr.service=emby-svc"
      - "traefik.http.services.emby-svc.loadbalancer.server.port=8096"
  
  ###  SABnzbd - NZB DOWNLOADER
  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    networks:
      - trfk_proxy
    ports:
      - "8084:8080"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKERCONFDIR}/sabnzbd:/config
      - ${DOCKERSHAREDDIR}:/shared
      - ${MEDIADIR_DOWNLOAD}:/downloads
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sabnzbd-rtr-bypass.entrypoints=https"
      # - "traefik.http.routers.sabnzbd-rtr-bypass.rule=Host(`sabnzbd.$DOMAINNAME`) && Query(`apikey`, `$SABNZBD_API_KEY`)"
      # - "traefik.http.routers.sabnzbd-rtr-bypass.rule=Host(`sabnzbd.$DOMAINNAME`) && Headers(`traefik-auth-bypass-key`, `$TRAEFIK_AUTH_BYPASS_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.sabnzbd-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sabnzbd-rtr.entrypoints=https"
      - "traefik.http.routers.sabnzbd-rtr.rule=Host(`sabnzbd.$DOMAINNAME`)"
      - "traefik.http.routers.sabnzbd-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sabnzbd-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sabnzbd-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.sabnzbd-rtr.service=sabnzbd-svc"
      - "traefik.http.routers.sabnzbd-rtr-bypass.service=sabnzbd-svc"
      - "traefik.http.services.sabnzbd-svc.loadbalancer.server.port=8080"
 
 
  # ###  OMBI - MEDIA REQUESTS
  # ombi:
    # image: linuxserver/ombi:latest
    # container_name: ombi
    # restart: unless-stopped
    # networks:
      # - T2Proxy
    # # ports:
    # #  - "$OMBI_PORT:3579"
    # security_opt:
      # - no-new-privileges:true
    # volumes:
      # - ${DOCKERCONFDIR}/ombi:/config
    # environment:
      # PUID: $PUID
      # PGID: $PGID
      # TZ: $TZ
      # BASE_URL: /ombi #optional
    # labels:
      # - "traefik.enable=true"
      # ## HTTP Routers
      # - "traefik.http.routers.ombi-rtr.entrypoints=https"
      # - "traefik.http.routers.ombi-rtr.rule=Host(`ombi.$DOMAINNAME`)"
      # ## Middlewares
      # - "traefik.http.routers.ombi-rtr.middlewares=chain-authelia@file"
      # ## HTTP Services
      # - "traefik.http.routers.ombi-rtr.service=ombi-svc"
      # - "traefik.http.services.ombi-svc.loadbalancer.server.port=3579"
 
   # ###  AIRSONIC - MUSIC SERVER
  # airsonic:
    # container_name: airsonic
    # image: linuxserver/airsonic:latest
    # restart: unless-stopped
    # networks:
      # - T2Proxy
    # security_opt:
      # - no-new-privileges:true
    # # ports:
    # #   - "$AIRSONIC_PORT:4040"
    # volumes:
      # - $MEDIADIR_MUSIC:/music
      # - $DOCKERCONFDIR/airsonic/podcasts:/podcasts
      # - $DOCKERCONFDIR/airsonic/playlists:/playlists
      # - $DOCKERCONFDIR/airsonic/config:/config
      # # - $DOCKERDIR/airsonic/config:/app/airsonic/config #Used to change log level for debugging
      # - /etc/timezone:/etc/timezone:ro
      # - /etc/localtime:/etc/localtime:ro
    # environment:
      # - PUID=$PUID
      # - PGID=$PGID
      # - JAVA_OPTS=-Dserver.use-forward-headers=true
    # labels:
      # - "traefik.enable=true"
      # ## HTTP Routers
      # - "traefik.http.routers.airsonic-rtr.entrypoints=https"
      # - "traefik.http.routers.airsonic-rtr.rule=Host(`airsonic.$DOMAINNAME`)"
      # ## Middlewares
      # - "traefik.http.routers.airsonic-rtr.middlewares=chain-no-auth@file"
      # ## HTTP Services
      # - "traefik.http.routers.airsonic-rtr.service=airsonic-svc"
      # - "traefik.http.services.airsonic-svc.loadbalancer.server.port=4040"
 
 ########### MAINTENCE
 
  ###  CLOUDFLARE DDNS - DYNAMIC DNS UPDATED
  # cf-ddns:
    # container_name: cf-ddns
    # image: oznu/cloudflare-ddns:latest
    # restart: unless-stopped
    # security_opt:
      # - no-new-privileges:true
    # secrets:
      # - cloudflare_api_token_secret
    # environment:
      # API_KEY: /run/secrets/cloudflare_api_token_secret
      # ZONE: $DOMAINNAME
      # PROXIED: "true"
      # RRTYPE: A
      # DELETE_ON_STOP: "false"
      # DNS_SERVER: 1.1.1.1

  
  # ###  WATCHTOWER - AUTOMATIC CONTAINER UPDATER
  # watchtower:
    # image: containrrr/watchtower
    # container_name: watchtower
    # restart: unless-stopped
    # networks:
      # - default
      # - socket_proxy
    # depends_on:
      # - socket-proxy
    # environment:
      # TZ: $TZ
      # WATCHTOWER_CLEANUP: "true"
      # WATCHTOWER_REMOVE_VOLUMES: "true"
      # WATCHTOWER_INCLUDE_STOPPED: "true"
      # WATCHTOWER_NO_STARTUP_MESSAGE: "false"
      # WATCHTOWER_SCHEDULE: "0 30 1 * * *" # Everyday at 1:30
      # # WATCHTOWER_NOTIFICATIONS: shoutrrr
      # # WATCHTOWER_NOTIFICATION_URL: "telegram://$TGRAM_BOT_TOKEN@telegram?channels=$TGRAM_CHAT_ID"
      # # WATCHTOWER_NOTIFICATIONS_LEVEL: info
      # DOCKER_HOST: tcp://socket-proxy:2375
      # DOCKER_API_VERSION: "1.40"
      
  ###  UNIFI CONTROLLER - MANAGING UNIFI NETWORK
  # UniFi Controller - Managing UniFi Network
  # UDP 3478 Port used for STUN. #REQUIRED
  # TCP 5514 Port used for remote syslog capture.
  # TCP 8080 Port used for device and controller communication. #REQUIRED
  # TCP 8443 Port used for controller GUI/API as seen in a web browser #REQUIRED
  # TCP 8880 Port used for HTTP portal redirection.
  # TCP 8843 Port used for HTTPS portal redirection.
  # TCP 6789 Port used for UniFi mobile speed test. #REQUIRED
  # TCP 27117 Port used for local-bound database communication.
  # UDP 5656-5699 Ports used by AP-EDU broadcasting.
  # UDP 10001 Port used for device discovery #REQUIRED
  # UDP 1900 Port used for "Make controller discoverable on L2 network" in controller settings.
  # unifi:
    # image: jacobalberty/unifi:stable
    # container_name: unifi
    # restart: unless-stopped
    # networks:
      # - T2Proxy
    # security_opt:
      # - no-new-privileges:true
    # ports:
      # - "8080:8080"
      # - "8443:8443"
      # - "3478:3478/udp"
      # - "10001:10001/udp"
      # - "6789:6789"
      # - "1900:1900/udp"
      # #- "8081:8081"
      # #- "8843:8843"
      # #- "8880:8880"
    # volumes:
      # - ${DOCKERCONFDIR}/unifi:/unifi
      # - /etc/timezone:/etc/timezone:ro
      # - /etc/localtime:/etc/localtime:ro
    # environment:
      # UNIFI_UID: $PUID
      # UNIFI_GID: $PGID
      # TZ: $TZ
      # RUNAS_UID0: "false"
      # BIND_PRIV: "false"
    # labels:
      # - "traefik.enable=true"
      # ## HTTP Routers
      # - "traefik.http.routers.unifi.entrypoints=https"
      # - "traefik.http.routers.unifi.rule=Host(`unifi.$DOMAINNAME`)"
      # - "traefik.http.routers.unifi.tls=true"
      # - "traefik.http.routers.unifi.tls.certresolver=dns-cloudflare"
      # ## Middlewares
      # - "traefik.http.routers.unifi.middlewares=chain-authelia@file"
      # ## HTTP Services
      # - "traefik.http.services.unifi-svc.loadbalancer.server.port=8443"
      # - "traefik.http.services.unifi-svc.loadbalancer.server.scheme=https"
      # # - "traefik.http.routers.unifi.tls.passthrough=true"
